1. Обработать ошибки в слайсах
    ++ User
    ++ Order
    ++ ingredients
    ++ orders
    ++ feeds
2. Написать юнит тесты
    ++ User
    ++ Order
    ++ ingredients
    ++ orders
    ++ feeds
    constructor

Функциональные требования
Интеграционные тесты на Cypress написаны для страницы конструктора бургера:
  
++ Созданы моковые данные для ингредиентов (например, в файле ingredients.json);
++ Настроен перехват запроса на эндпоинт api/ingredients’, в ответе на который возвращаются созданные ранее моковые данные.
++Протестировано добавление ингредиента из списка в конструктор. Минимальные требования — добавление одного ингредиента, в идеале — добавление булок и добавление начинок.
Протестирована работа модальных окон:
++ открытие модального окна ингредиента;
++ закрытие по клику на крестик;
!!! закрытие по клику на оверлей (желательно);
Создание заказа:
++ Созданы моковые данные ответа на запрос данных пользователя.
++ Созданы моковые данные ответа на запрос создания заказа.
++ Подставляются моковые токены авторизации.
++ Собирается бургер.
++ Вызывается клик по кнопке «Оформить заказ».
++ Проверяется, что модальное окно открылось и номер заказа верный.
++ Закрывается модальное окно и проверяется успешность закрытия.
++ Проверяется, что конструктор пуст.

Тесты на Jest:  
Проверяют правильную инициализацию rootReducer.
Проверяют редьюсер слайса constructor:
обработку экшена добавления ингредиента;
обработку экшена удаления ингредиента;
обработку экшена изменения порядка ингредиентов в начинке;
Проверяют редьюсеры остальных слайсов (на примере ingredients):
++ При вызове экшена Request булевая переменная, отвечающая за текущий запрос (например, store.isLoading) меняется на true.
++ При вызове экшена Success и передаче в него ингредиентов эти данные записываются в стор (например, в [store.data](http://store.data)) и store.isLoading меняется на false.
++ При вызове экшена Failed и передаче в него ошибки она записывается в стор (например, store.error) и store.isLoading меняется на false.


Настроено тестирование приложения
++ Функциональность из задания и чек-листа предыдущей работы реализована корректно и всё ещё работает.
++ В проект добавлены и настроены библиотеки Cypress и Jest.
++ В разделе scripts файла package.json описаны команды запуска Cypress и Jest тестов.
++ Тесты, относящиеся к проверке одной функциональности, объединены блоком describe. В нём описано, что проверяет этот набор тестов.
++ В каждом тесте есть корректное описание того, что именно проверяет этот тест.
Тесты содержат набор проверок, которого достаточно для проверки правильности работы тестируемой функциональности.
В файлах тестов единообразное форматирование кода и соблюдаются соглашения об именованиях используемые на прошлых спринтах.
Все тесты написаны на TypeScript.
Все тесты завершаются успешно.


Тесты на Cypress
Написаны тесты, проверяющие следующую функциональность:
++ 1. Добавление ингредиента из списка ингредиентов в конструктор.
++ 2. Открытие и закрытие модального окна с описанием ингредиента.
++ 3. Отображение в открытом модальном окне данных именно того ингредиента, по которому произошел клик.
4. Процесс создания заказа: добавление ингредиентов в конструктор бургера, проверка отображения модального окна с верным номером заказа при клике на кнопку оформления заказа. Проверка очистки конструктора бургера от добавленных ингредиентов.
++ 5. В папке cypress/fixtures созданы файлы с данными ответов на запросы, которые используются для подмены запросов к реальному бэкенду.
6. Настроен перехват с помощью cy.intercept всех запросов к бэкенду, выполняемых во время запуска тестов.
!!! 7. Перед выполнением теста создания заказа в localStorage и сookie подставляются фейковые токены авторизации, а после завершения теста они очищаются.


Тесты на Jest:
1. Файлы Jest тестов находятся радом с файлом, который они тестируют, или в отдельной папке __tests__.
2. Написан тест, проверяющий правильную настройку и работу rootReducer: вызов rootReducer с undefined состоянием и экшеном, который не обрабатывается ни одним редьюсером (например, { type: 'UNKNOWN_ACTION' }), возвращает корректное начальное состояние хранилища.
3. Написаны тесты, проверяющие работу редьюсера конструктора бургера при обработке экшенов добавления и удаления ингредиента.
4. Написаны тесты, проверяющие обработку редьюсером экшенов генерируемых при выполнении асинхронного запроса: экшены начала запроса, успешного выполнения запроса и ошибки запроса.